!function(a){"use strict";var b={html:{testString:function(a,b){return a.html()===b},testRegexp:function(a,b){return a.html().match(b)},testFunction:function(a,b){return b(a.html())}},text:{testString:function(a,b){return a.text()===b},testRegexp:function(a,b){return a.text().match(b)},testFunction:function(a,b){return b(a.text())}},css:{testKeyValue:function(a,b){return a.css(b.key)==b.value},testKeyValueFn:function(a,b){return b.value(a.css(b.key))}},data:{testKeyValue:function(a,b){return a.data(b.key)==b.value},testKeyRegexp:function(a,b){return(""+a.data(b.key)).match(b.value)},testKeyValueFn:function(a,b){return b.value(a.data(b.key))}},width:{testNumber:function(a,b){return a.width()===b},testFunction:function(a,b){return b(a.width())}},height:{testNumber:function(a,b){return a.height()===b},testFunction:function(a,b){return b(a.height())}}},c=function(a,c){return a&&b[a]?c===""+c&&c.indexOf?b[a].testString:c+0===c?b[a].testNumber:c.compile?b[a].testRegexp:c.prototype&&c.prototype.constructor?b[a].testFunction:c.key&&c.value?c.value.prototype&&c.value.prototype.constructor?b[a].testKeyValueFn:c.value.compile?b[a].testKeyRegexp:b[a].testKeyValue:null:null};a.fn.where=function(b){var d=[];return this.each(function(e,f){a.each(b,function(b,e){var g=c(b,e),h=a(f);if(!g)throw new Error("Assertion for filter "+b+" is unknown");g(h,e)&&d.push(h)})}),a(d)}}(jQuery);